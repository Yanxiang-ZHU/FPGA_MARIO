# 
# Synthesis run script generated by Vivado
# 

namespace eval rt {
    variable rc
}
set rt::rc [catch {
  uplevel #0 {
    set ::env(BUILTIN_SYNTH) true
    source $::env(HRT_TCL_PATH)/rtSynthPrep.tcl
    rt::HARTNDb_resetJobStats
    rt::HARTNDb_resetSystemStats
    rt::HARTNDb_startSystemStats
    rt::HARTNDb_startJobStats
    set rt::cmdEcho 0
    rt::set_parameter writeXmsg true
    rt::set_parameter enableParallelHelperSpawn true
    set ::env(RT_TMP) "C:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.runs/synth_1/.Xil/Vivado-10040-YanX/realtime/tmp"
    if { [ info exists ::env(RT_TMP) ] } {
      file delete -force $::env(RT_TMP)
      file mkdir $::env(RT_TMP)
    }

    rt::delete_design

    rt::set_parameter datapathDensePacking false
    set rt::partid xc7a35tcpg236-1
    source $::env(HRT_TCL_PATH)/rtSynthParallelPrep.tcl
     file delete -force synth_hints.os

    set rt::multiChipSynthesisFlow false
    source $::env(SYNTH_COMMON)/common.tcl
    set rt::defaultWorkLibName xil_defaultlib
    rt::set_parameter defaultVhdlWorkLib xil_defaultlib

    rt::set_parameter loadVhdl2008Libs false
    rt::set_parameter loadVhdl2019Libs false
    rt::set_parameter deferParseUntilElab true
    rt::set_parameter sortHdlCommandLine true
    set rt::useElabCache false
    if {$rt::useElabCache == false} {
      rt::read_verilog -sv -include {
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/clk_wiz_0
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/dist_mem_gen_0
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/dist_mem_gen_1
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/dist_mem_gen_2
  } D:/Xilinx/Vivado/2023.2/data/ip/xpm/xpm_cdc/hdl/xpm_cdc.sv
      rt::read_verilog -sv -include {
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/clk_wiz_0
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/dist_mem_gen_0
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/dist_mem_gen_1
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/dist_mem_gen_2
  } {
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/board.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/clouds.v
    }
      rt::read_verilog -include {
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/clk_wiz_0
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/dist_mem_gen_0
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/dist_mem_gen_1
    c:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.gen/sources_1/ip/dist_mem_gen_2
  } {
      C:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.runs/synth_1/.Xil/Vivado-10040-YanX/realtime/clk_wiz_0_stub.v
      C:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.runs/synth_1/.Xil/Vivado-10040-YanX/realtime/dist_mem_gen_0_stub.v
      C:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.runs/synth_1/.Xil/Vivado-10040-YanX/realtime/dist_mem_gen_1_stub.v
      C:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.runs/synth_1/.Xil/Vivado-10040-YanX/realtime/dist_mem_gen_2_stub.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/change2negedge.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/clk_divider.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/draw_background.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/draw_mario_score.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/first_stage.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/game_engine.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/gameover.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/mario_font_rom.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/mario_score24x1.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/DOS_Mario.srcs/sources_1/new/mouse.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/music.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/new_block.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/player.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/vga_timing.v
      C:/Users/39551/Desktop/DOS-Mario-FPGA/sources/main.v
    }
      rt::read_vhdl -lib xpm D:/Xilinx/Vivado/2023.2/data/ip/xpm/xpm_VCOMP.vhd
      rt::filesetChecksum
    }
    rt::set_parameter usePostFindUniquification false
    set rt::top main
    rt::set_parameter enableIncremental true
    rt::set_parameter markDebugPreservationLevel "enable"
    set rt::reportTiming false
    rt::set_parameter elaborateOnly true
    rt::set_parameter elaborateRtl true
    rt::set_parameter eliminateRedundantBitOperator false
    rt::set_parameter dataflowBusHighlighting false
    rt::set_parameter generateDataflowBusNetlist false
    rt::set_parameter dataFlowViewInElab false
    rt::set_parameter busViewFixBrokenConnections false
    rt::set_parameter elaborateRtlOnlyFlow false
    rt::set_parameter writeBlackboxInterface true
    rt::set_parameter merge_flipflops true
    rt::set_parameter srlDepthThreshold 3
    rt::set_parameter rstSrlDepthThreshold 4
# MODE: 
    rt::set_parameter webTalkPath {}
    rt::set_parameter synthDebugLog false
    rt::set_parameter printModuleName false
    rt::set_parameter enableSplitFlowPath "C:/Users/39551/Desktop/FPGA_MARIO/FPGA_MARIO.runs/synth_1/.Xil/Vivado-10040-YanX/"
    set ok_to_delete_rt_tmp true 
    if { [rt::get_parameter parallelDebug] } { 
       set ok_to_delete_rt_tmp false 
    } 
    if {$rt::useElabCache == false} {
        set oldMIITMVal [rt::get_parameter maxInputIncreaseToMerge]; rt::set_parameter maxInputIncreaseToMerge 1000
        set oldCDPCRL [rt::get_parameter createDfgPartConstrRecurLimit]; rt::set_parameter createDfgPartConstrRecurLimit 1
        $rt::db readXRFFile
      rt::run_rtlelab -module $rt::top
        rt::set_parameter maxInputIncreaseToMerge $oldMIITMVal
        rt::set_parameter createDfgPartConstrRecurLimit $oldCDPCRL
    }

    set rt::flowresult [ source $::env(SYNTH_COMMON)/flow.tcl ]
    rt::HARTNDb_stopJobStats
    if { $rt::flowresult == 1 } { return -code error }


    if { [ info exists ::env(RT_TMP) ] } {
      if { [info exists ok_to_delete_rt_tmp] && $ok_to_delete_rt_tmp } { 
        file delete -force $::env(RT_TMP)
      }
    }

    source $::env(HRT_TCL_PATH)/rtSynthCleanup.tcl
  } ; #end uplevel
} rt::result]

if { $rt::rc } {
  $rt::db resetHdlParse
  set hsKey [rt::get_parameter helper_shm_key] 
  if { $hsKey != "" && [info exists ::env(BUILTIN_SYNTH)] && [rt::get_parameter enableParallelHelperSpawn] } { 
     $rt::db killSynthHelper $hsKey
  } 
  source $::env(HRT_TCL_PATH)/rtSynthCleanup.tcl
  return -code "error" $rt::result
}
